// Importa o model de reservas, respons√°vel pela comunica√ß√£o com o banco
const Reserva = require("../models/reservaModels");

/**
 * Controlador respons√°vel pelas opera√ß√µes de reserva de livros.
 * As a√ß√µes poss√≠veis s√£o: reservar, cancelar e listar reservas por usu√°rio.
 */

// üîπ FAZER UMA NOVA RESERVA
exports.reservar = async (req, res) => {
  try {
    // Desestrutura os dados enviados no corpo da requisi√ß√£o
    const { usuarioId, livroId } = req.body;

    // Chama o model para realizar a reserva no banco
    const resultado = await Reserva.reservar(usuarioId, livroId);

    // Retorna status 201 (criado com sucesso) e o resultado da reserva
    res.status(201).json(resultado);
  } catch (err) {
    // Retorna erro interno, caso algo d√™ errado no processo
    res.status(500).json({ erro: err.message });
  }
};

// üîπ CANCELAR UMA RESERVA EXISTENTE
exports.cancelar = async (req, res) => {
  try {
    // Pega o ID da reserva a ser cancelada a partir da URL (ex: /reservas/10)
    const { id } = req.params;

    // Chama o model para excluir a reserva no banco de dados
    const resultado = await Reserva.cancelar(id);

    // Retorna o resultado da opera√ß√£o (mensagem de sucesso)
    res.json(resultado);
  } catch (err) {
    res.status(500).json({ erro: err.message });
  }
};

// üîπ LISTAR TODAS AS RESERVAS DE UM USU√ÅRIO
exports.listarReservas = async (req, res) => {
  try {
    // Pega o ID do usu√°rio via query string (ex: /reservas?usuarioId=5)
    const { usuarioId } = req.query;

    // Busca todas as reservas feitas por esse usu√°rio
    const reservas = await Reserva.listarPorUsuario(usuarioId);

    // Retorna a lista em formato JSON
    res.json(reservas);
  } catch (err) {
    res.status(500).json({ erro: err.message });
  }
};
